
node("jenkins-agent-lavacli-docker") {
    stage("checkout scm") {
        sh 'rm -rf pipeline_scm'
        dir("pipeline_scm") {
            checkout scm
        }
    }

    def isAnyParams = params.size() != 0

    stage("properties") {
        // 设置参数化构建
        load('pipeline_scm/RVCI/RVCK/config.groovy')
        properties([
            parameters(lava_trigger_params_keys.collect {
                allParams[it]
            }),
        ])
    }

    if(isAnyParams) {
        // 执行构建
        stage("init workspace") {
            dir("lavaci") {
                checkout scmGit(
                    userRemoteConfigs: [[url: 'https://github.com/RVCK-Project/lavaci.git']],
                    branches: [[name: 'main']],
                    extensions: [cloneOption(depth: 1, noTags: true, reference: '', shallow: true, timeout: 5)],
                )
            }
        }

        stage("lava check") {
            def lava_scripts = readFile 'pipeline_scm/RVCI/RVCK/rvck-lava-trigger/run.sh'
            timestamps {
                dir("lavaci") {
                    try {
                        withCredentials([usernameColonPassword(credentialsId: 'dd2c86ed-f19e-445b-9fc8-5d2c2b23ecd2', variable: 'lava_admin_token')]) {
                            sh lava_scripts
                        }
                        build wait: false, job: 'gh_actions', parameters: [
                            string(name: 'REPO', value: params.REPO),
                            string(name: 'ISSUE_ID', value: params.ISSUE_ID),
                            string(name: 'SET_LABEL', value: 'lava_check_pass'),
                            string(name: 'COMMENT_CONTENT', value: readFile('COMMENT_CONTENT')),
                        ]
                    } catch (err) {
                        build wait: false, job: 'gh_actions', parameters: [
                            string(name: 'REPO', value: params.REPO),
                            string(name: 'ISSUE_ID', value: params.ISSUE_ID),
                            string(name: 'SET_LABEL', value: 'lava_check_fail'),
                            string(name: 'COMMENT_CONTENT', value: readFile('COMMENT_CONTENT')),
                        ]
                        currentBuild.result = 'FAILURE'
                        throw err
                    }
                }
            }
        }
    }
}